[["index.html", "Ternary maps of population structure in Denmark Prerequisite Acknowledgements R session", " Ternary maps of population structure in Denmark Javier Elío, Marina Georgati, Henning S. Hansen, Frederik S. Hass, Carsten Keßler 2021-07-21 Prerequisite The data have been analysed with R (version 4.1.0) and Rstudio (version 1.4.1717), and the book has been created with bookdown package. The actual version of ggtern (3.3.0) gets some conflicts with ggplot2 (3.3.5) and some ggplots do not work after calling ggtern. Therefore, I would suggest to work install ggplot2 v.3.3.0 and works in a separate project (with renv) when you need ternary plots with ggtern. # renv::init() # # install.packages(&quot;sf&quot;) # install.packages(&quot;ggspatial&quot;) # install.packages(&quot;ggtern&quot;) # install.packages(&quot;tricolore&quot;) # install.packages(&quot;danstat&quot;) # install.packages(&quot;furrr&quot;) # install.packages(&quot;SnowballC&quot;) # install.packages(&quot;patchwork&quot;) # install.packages(&quot;tm&quot;) # install.packages(&quot;data.table&quot;) # install.packages(&quot;tidytable&quot;) # install.packages(&quot;latex2exp&quot;) # install.packages(&quot;rmarkdown&quot;) # install.packages(&quot;bookdown&quot;) # devtools::install_version(&quot;tidyverse&quot;, # version = &quot;1.3.0&quot;, # repos = &quot;http://cran.us.r-project.org&quot;) # devtools::install_version(&quot;ggplot2&quot;, # version = &quot;3.3.0&quot;, # repos = &quot;http://cran.us.r-project.org&quot;) # Packages my_pkgs &lt;- c(&quot;sf&quot;, &quot;ggspatial&quot;, &quot;ggtern&quot;, &quot;tricolore&quot;, &quot;tidyverse&quot;, &quot;danstat&quot;, &quot;furrr&quot;, &quot;SnowballC&quot;, &quot;patchwork&quot;, &quot;tm&quot;, &quot;data.table&quot;, &quot;tidytable&quot;, &quot;latex2exp&quot;, &quot;rmarkdown&quot;) # load packages lapply(my_pkgs, require, character.only = TRUE) Furthermore, we have created our own package for downloading kortforsyningen data to a local repository directly from R (i.e. dangeo). The package can be downloaded from GitHub: # Install packages from GitHub if(!require(&quot;devtools&quot;)) install.packages(&quot;devtools&quot;) if (!require(&quot;dangeo&quot;)) remotes::install_github(&quot;javiereliomedina/dangeo&quot;) library(dangeo) Although the kortforsyningen data are free, we would need to create a username and a password for getting access to them (you can make it here: Opret ny bruger). By default dangeo looks for credentials on .Renviron as: kortforsyningen_id = \"username\" and kortforsyningen_pwd = \"password\". You would need to save them with usethis::edit_r_environ(): # Set username and password # usethis::edit_r_environ() # Open .Renviron file, and save the username (kortforsyningen_id = &quot;your_username&quot;) and password (kortforsyningen_pwd = &quot;your_password&quot;) You would also need to define with dangeo_set_param() the local directory where the data are downloaded (loc_dir). It is defined as loc_dir = rappdirs::user_cache_dir(), although it can be changed loc_dir = ./your/local/path. The first time a file is downloaded with dangeo_get_data(), the process can be time consuming (there are some very big files). However, it will not be downloaded in subsequent calls if the files is already in the local directory (the dataset can be overwritten be setting overwrite = TRUE on dangeo_get_data()). Once we have our username and password, and we have define the local repository for the data, we can set them on our R-session: # Set local repository and password to kortforsyningen dangeo_set_param() Acknowledgements This work has been financed by Aalborg University - AAU (Project: Global flows of migrants and their impact on north European welfare states - FLOW). The sole responsibility of this publication lies with the authors. AAU is not responsible for any use that may be made of the information contained therein. R session # R version 4.1.0 (2021-05-18) # Platform: x86_64-w64-mingw32/x64 (64-bit) # Running under: Windows 10 x64 (build 19042) # # Matrix products: default # # locale: # [1] LC_COLLATE=English_United Kingdom.1252 LC_CTYPE=English_United Kingdom.1252 # [3] LC_MONETARY=English_United Kingdom.1252 LC_NUMERIC=C # [5] LC_TIME=English_United Kingdom.1252 # # attached base packages: # [1] stats graphics grDevices datasets utils methods base # # other attached packages: # [1] dangeo_0.0.0.9000 devtools_2.4.2 usethis_2.0.1 rmarkdown_2.9 latex2exp_0.5.0 # [6] tidytable_0.6.3 data.table_1.14.0 tm_0.7-8 NLP_0.2-1 patchwork_1.1.1 # [11] SnowballC_0.7.0 furrr_0.2.3 future_1.21.0 danstat_0.1.0 forcats_0.5.1 # [16] stringr_1.4.0 dplyr_1.0.7 purrr_0.3.4 readr_2.0.0 tidyr_1.1.3 # [21] tibble_3.1.2 tidyverse_1.3.0 tricolore_1.2.2 ggtern_3.3.0 ggplot2_3.3.0 # [26] ggspatial_1.1.5 sf_1.0-1 # # loaded via a namespace (and not attached): # [1] colorspace_2.0-2 ellipsis_0.3.2 class_7.3-19 rprojroot_2.0.2 # [5] fs_1.5.0 rstudioapi_0.13 proxy_0.4-26 listenv_0.8.0 # [9] remotes_2.4.0 fansi_0.5.0 lubridate_1.7.10 xml2_1.3.2 # [13] codetools_0.2-18 cachem_1.0.5 robustbase_0.93-8 knitr_1.33 # [17] pkgload_1.2.1 jsonlite_1.7.2 broom_0.7.8 servr_0.22 # [21] dbplyr_2.1.1 compiler_4.1.0 httr_1.4.2 backports_1.2.1 # [25] fastmap_1.1.0 assertthat_0.2.1 cli_3.0.1 later_1.2.0 # [29] prettyunits_1.1.1 htmltools_0.5.1.1 tools_4.1.0 gtable_0.3.0 # [33] glue_1.4.2 rappdirs_0.3.3 Rcpp_1.0.7 slam_0.1-48 # [37] cellranger_1.1.0 jquerylib_0.1.4 vctrs_0.3.8 tensorA_0.36.2 # [41] xfun_0.24 ps_1.6.0 globals_0.14.0 proto_1.0.0 # [45] testthat_3.0.3 rvest_1.0.0 mime_0.11 lifecycle_1.0.0 # [49] renv_0.13.2 DEoptimR_1.0-9 MASS_7.3-54 scales_1.1.1 # [53] hms_1.1.0 promises_1.2.0.1 parallel_4.1.0 yaml_2.2.1 # [57] memoise_2.0.0 gridExtra_2.3 sass_0.4.0 stringi_1.7.3 # [61] desc_1.3.0 e1071_1.7-7 pkgbuild_1.2.0 rlang_0.4.11 # [65] pkgconfig_2.0.3 compositions_2.0-1 evaluate_0.14 lattice_0.20-44 # [69] processx_3.5.2 tidyselect_1.1.1 parallelly_1.27.0 plyr_1.8.6 # [73] magrittr_2.0.1 bookdown_0.22 R6_2.5.0 generics_0.1.0 # [77] DBI_1.1.1 pillar_1.6.1 haven_2.4.1 withr_2.4.2 # [81] units_0.7-2 bayesm_3.1-4 modelr_0.1.8 crayon_1.4.1 # [85] KernSmooth_2.23-20 utf8_1.2.1 tzdb_0.1.2 viridis_0.6.1 # [89] grid_4.1.0 readxl_1.3.1 callr_3.7.0 reprex_2.0.0 # [93] digest_0.6.27 classInt_0.4-3 httpuv_1.6.1 munsell_0.5.0 # [97] viridisLite_0.4.0 bslib_0.2.5.1 sessioninfo_1.1.1 "],["capital-region.html", "Chapter 1 Capital region 1.1 Data 1.2 Ternary plots", " Chapter 1 Capital region 1.1 Data 1.1.1 Parishes in the capital region # Download DAGI (scale 1:10000) dangeo_get_data(ftp_folder = &quot;landinddelinger/dagi/SHAPE&quot;, zip_name = &quot;DAGIREF_SHAPE_UTM32-EUREF89.zip&quot;) # Municipalities (get from DAGI) muni_link &lt;- paste(loc_dir, &quot;DAGIREF_SHAPE_UTM32-EUREF89/ADM&quot;, &quot;KOMMUNE.shp&quot;, sep = &quot;/&quot;) dk_muni &lt;- read_sf(muni_link) %&gt;% st_zm() %&gt;% st_transform(crs = &quot;EPSG:25832&quot;) %&gt;% select(KOMKODE, KOMNAVN) %&gt;% rename(muni_id = KOMKODE, muni_name = KOMNAVN) %&gt;% group_by(muni_id, muni_name) %&gt;% summarise(geometry = sf::st_union(geometry)) %&gt;% ungroup() %&gt;% # Calculate the area of each municipalitie (km2) mutate(area_km2 = as.numeric(units::set_units(st_area(.), km^2))) # Country dk_country &lt;- st_union(dk_muni) # Codes of the communes under study capital_region_muni &lt;- c(&quot;København&quot;, &quot;Frederiksberg&quot;, &quot;Albertslund&quot;, &quot;Ballerup&quot;, &quot;Brøndby&quot;, &quot;Dragør&quot;, &quot;Gentofte&quot;, &quot;Gladsaxe&quot;, &quot;Glostrup&quot;, &quot;Herlev&quot;, &quot;Høje-Taastrup&quot;, &quot;Hvidovre&quot;, &quot;Ishøj&quot;, &quot;Lyngby-Taarbæk&quot;, &quot;Rødovre&quot;, &quot;Tårnby&quot;, &quot;Vallensbæk&quot;) # Select municipalities under study capital_muni &lt;- dk_muni %&gt;% filter(muni_name %in% capital_region_muni) dk_country_crop &lt;- st_crop(dk_country, capital_muni) # Parishes polygons of Denmark, and select those in the study area prsh_link &lt;- paste(loc_dir, &quot;DAGIREF_SHAPE_UTM32-EUREF89/ADM&quot;, &quot;SOGN.shp&quot;, sep = &quot;/&quot;) dk_prsh &lt;- read_sf(prsh_link) %&gt;% st_zm() %&gt;% st_transform(crs = &quot;EPSG:25832&quot;) # Select those where the centroid is in the capital region dk_prsh_cent &lt;- st_centroid(dk_prsh) capital_prsh_cent &lt;- st_intersection(dk_prsh_cent, capital_muni) capital_prsh &lt;- dk_prsh %&gt;% # Get parishes in the capital region filter(SOGNEKODE %in% capital_prsh_cent$SOGNEKODE) %&gt;% # Combine several parish features geometries into one polygon group_by(SOGNEKODE, SOGNENAVN) %&gt;% summarise(geometry = st_union(geometry)) %&gt;% ungroup() %&gt;% # add area of the parish (in km2) mutate(prsh_area_km2 = as.numeric(units::set_units(st_area(.), km^2))) %&gt;% # Translate column names rename(prsh_id = SOGNEKODE, prsh_name = SOGNENAVN) # Contour of the capital region (merge the parishes in one polygon): capital_area &lt;- capital_prsh %&gt;% st_union() %&gt;% st_sf() %&gt;% st_transform(crs = &quot;EPSG:25832&quot;) ggplot() + geom_sf(data = capital_prsh, aes(geometry = geometry), fill = &quot;grey&quot;, color = &quot;grey50&quot;, size = 0.05) + geom_sf(data = capital_muni, aes(geometry = geometry), fill = NA, color = &quot;black&quot;, size = 0.5) + theme_void() + annotation_scale(location = &quot;br&quot;, text_cex = 1) + annotation_north_arrow(location = &quot;br&quot;, pad_x = unit(2, &quot;cm&quot;), pad_y = unit(0.65, &quot;cm&quot;), which_north = &quot;true&quot;, height = unit(0.5, &quot;cm&quot;), width = unit(0.5, &quot;cm&quot;), style = north_arrow_orienteering(text_col = &quot;white&quot;, text_size = 1)) 1.1.2 Population Population data from Denmark Statistics: KMSTA001: Population 1. January by parish, ancestry and National Church. ## Auxiliary functions for reading the data with the package *danstat* # Loop by year for getting DST data steps &lt;- function(year){ var_values &lt;- list(id_region, id_ancestry, year) var_input &lt;- purrr::map2(.x = var_codes, .y = var_values, .f = ~list(code = .x, values = .y)) get_data(id_table, variables = var_input) } # Function for removing punctuation, lowercase, stem, stopwords, and collapse strings rm_words &lt;- function(x, stopwords) { x %&gt;% strsplit(&quot; &quot;, fixed = TRUE) %&gt;% lapply(tm::removePunctuation) %&gt;% lapply(tolower) %&gt;% lapply(SnowballC::wordStem) %&gt;% lapply(function(x) x[!x %in% stopwords]) %&gt;% vapply(function(x) paste(x , collapse = &quot;_&quot;), character(1)) } ## Read and clean table KMSTA001 # Table id_table &lt;- &quot;KMSTA001&quot; var_pop &lt;- get_table_metadata(table_id = id_table, variables_only = TRUE) # Codes for var_input var_codes &lt;- c(&quot;SOGN&quot;, &quot;HERKOMST&quot;, &quot;Tid&quot;) # Values for var_input # Region: parishes of the study area (i.e. capital_parish) id_region &lt;- capital_prsh$prsh_id # Ancestry id_ancestry &lt;- NA # Quarters id_year &lt;- var_pop$values[[4]]$id[1:13] # Select 2008-2020 # Read data (n parallel) plan(multisession, workers = 7) capital_prsh_ancestry_read &lt;- id_year %&gt;% future_map_dfr(steps) plan(&quot;default&quot;) # Clean data capital_prsh_ancestry &lt;- capital_prsh_ancestry_read %&gt;% # Translate column names into English rename(parish = SOGN, ancestry = HERKOMST, year = TID, value = INDHOLD) %&gt;% # Get parish codes, names, and municipality names separate(parish, c(&quot;prsh_id&quot;, &quot;prsh_name&quot;, &quot;muni_name&quot;), sep = &quot; &quot;, extra = &quot;drop&quot;) %&gt;% mutate(muni_name = gsub(&quot;\\\\(&quot;, &quot;&quot;, muni_name)) %&gt;% # Make shorter names in ancestry mutate(ancestry = case_when( ancestry == &quot;Persons of Danish origin&quot; ~ &quot;pop_dan&quot;, ancestry == &quot;Immigrants from western countries&quot; ~ &quot;pop_mi_wst&quot;, ancestry == &quot;Immigrants from non-western countries&quot; ~ &quot;pop_mi_nwst&quot;, ancestry == &quot;Descendants from western countries&quot; ~ &quot;pop_de_wst&quot;, ancestry == &quot;Descendants from non-western countries&quot; ~ &quot;pop_de_nwst&quot;), ancestry = factor(ancestry)) %&gt;% # Pivot (one row for peach parish and year) pivot_wider(names_from = ancestry, values_from = value) %&gt;% # Merge immigrants and their descendants (i.e. foreigners) mutate(pop_frgn_wst = pop_mi_wst + pop_de_wst, pop_frgn_nwst = pop_mi_nwst + pop_de_nwst) %&gt;% select(-c(pop_mi_wst, pop_de_wst, pop_mi_nwst, pop_de_nwst)) %&gt;% # Add column with total population mutate(pop_total = select(., starts_with(&quot;pop_&quot;)) %&gt;% rowSums()) %&gt;% # Put NA when pop_* is 0 mutate(across(starts_with(&quot;pop&quot;), ~ifelse(.x == 0, NA, .x))) # Add the spatial information: capital_prsh_ancestry_sf &lt;- capital_prsh %&gt;% select(prsh_id, prsh_area_km2) %&gt;% left_join(capital_prsh_ancestry, by = c(&quot;prsh_id&quot;)) %&gt;% # Population density mutate(across(starts_with(&quot;pop&quot;), ~.x/prsh_area_km2, .names = &quot;{.col}_km2&quot;)) 1.1.3 Housing prices # Load data sum_runits_oft_prices &lt;- readRDS(&quot;prsh_house_prices.rds&quot;) # Plot ggplot() + geom_sf(data = dk_country_crop, aes(geometry = geometry), fill = &quot;grey&quot;) + geom_sf(data = sum_runits_oft_prices, aes(geometry = geometry, fill = cut_number(median_2020_kDKK_m2, n = 10, ordered_result = TRUE, dig.lab = 0)), color = NA, legend = &quot;meh&quot;) + geom_sf(data = capital_muni, aes(geometry = geometry), fill = NA, color = &quot;white&quot;, size = 0.05) + scale_fill_viridis_d(name = TeX(&quot;$\\\\overset{\\\\textbf{Percentiles}}{(kDKK/m^2)}$&quot;), option = &quot;magma&quot;, direction = -1) + theme_void() + labs(x = &quot;&quot;, y = &quot;&quot;) + facet_wrap( ~year, ncol = 3) Figure 1.1: Median 2020-adjusted house prices in the ordinary free trade by grid cells of 100m x 100m 1.2 Ternary plots 1.2.1 Diagrams Population structure by year, with all the data together in the same diagram. ggtern::ggtern(data = capital_prsh_ancestry_sf, aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = factor(year) ) ) + scale_color_viridis_d() + geom_point() + ggtern::theme_rgbw() + ggtern::theme_hidetitles() Figure 1.2: ternary plot by year Separate plots by year and add the parishes in the legend. ggtern::ggtern(data = capital_prsh_ancestry_sf, aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = prsh_name)) + geom_point() + facet_wrap( ~year, ncol = 3) + ggtern::theme_rgbw() + ggtern::theme_hidetitles() + theme(legend.position = &quot;bottom&quot;) + guides(colour = guide_legend(title.position = &quot;top&quot;)) Figure 1.3: Ternary plots by parish Links with house prices (zoom the figure to the parishes with median values). ggtern::ggtern(data = sum_runits_oft_prices, aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = cut_number(median_2020_kDKK_m2, n = 10, dig.lab = 0))) + viridis::scale_color_viridis(name = &quot;Percentiles\\n[kDkk/m2]&quot;, option = &quot;turbo&quot;, discrete = TRUE) + geom_point(size = 0.85) + ggtern::theme_rgbw() + ggtern::theme_hidetitles() + ggtern::theme_zoom_L(0.6) + guides(colour = guide_legend(reverse = TRUE, override.aes = list(size = 3))) Figure 1.4: Median housing prices and popupation distribution by parish (all data) ggtern::ggtern(data = sum_runits_oft_prices, aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = cut_number(median_2020_kDKK_m2, n = 10, dig.lab = 0))) + facet_wrap( ~ year, ncol = 3)+ viridis::scale_color_viridis(name = &quot;Percentiles\\n[kDkk/m2]&quot;, option = &quot;turbo&quot;, discrete = TRUE) + geom_point(size = 0.9) + ggtern::theme_rgbw() + ggtern::theme_hidetitles() + ggtern::theme_zoom_L(0.6) + guides(colour = guide_legend(reverse = TRUE, override.aes = list(size = 3))) Figure 1.5: Median housing prices and popupation distribution by parish and year 1.2.2 Maps Center over the compositional mean of 2019 (i.e. Danes ~ 80.3%; non-wst ~ 12.3; and wst ~ 7.4%). f_tern_map &lt;- function(df) { # Make colours tric &lt;- tricolore::Tricolore(df, p1 = &quot;pop_dan&quot;, p2 = &quot;pop_frgn_wst&quot;, p3 = &quot;pop_frgn_nwst&quot;, breaks = Inf, show_data = FALSE, center = c(0.803, 0.074, 0.123), hue = 2/12, lightness = 1, chroma = 1 ) # legend p_legend &lt;- tric$key + labs(L = &quot;% Danes&quot;, T = &quot;% Wst&quot;, R = &quot;% Non-wst&quot;) + theme(axis.title = element_text(size = 5, face = &quot;bold&quot;), axis.text = element_text(size = 5)) # Add columns with colours df &lt;- df %&gt;% mutate(pop_rgb = tric$rgb) # Map ggplot() + geom_sf(data = dk_country_crop, aes(geometry = geometry), fill = &quot;grey&quot;) + geom_sf(data = df, aes(fill = pop_rgb, geometry = geometry), size = 0.05) + scale_fill_identity() + geom_sf(data = capital_muni, aes(geometry = geometry), fill = NA, color = &quot;white&quot;, size = 0.5)+ labs(title = df$year) + theme_void() + annotation_custom( ggtern::ggplotGrob(p_legend) , xmin = 730000, xmax = 742000, ymin = 6178000, ymax = 6190000 ) } plts &lt;- capital_prsh_ancestry_sf %&gt;% group_split(year) %&gt;% map(. , .f = f_tern_map) wrap_plots(plts, ncol = 3) Figure 1.6: Population distribution Only for 2020. plts[[13]] Figure 1.7: Population distribution in 2020 "]]
