[["capital-region.html", "Chapter 1 Capital region 1.1 Data 1.2 Ternary plots", " Chapter 1 Capital region 1.1 Data 1.1.1 Parishes in the capital region # Download DAGI (scale 1:10000) dangeo_get_data(ftp_folder = &quot;landinddelinger/dagi/SHAPE&quot;, zip_name = &quot;DAGIREF_SHAPE_UTM32-EUREF89.zip&quot;) # Municipalities (get from DAGI) muni_link &lt;- paste(loc_dir, &quot;DAGIREF_SHAPE_UTM32-EUREF89/ADM&quot;, &quot;KOMMUNE.shp&quot;, sep = &quot;/&quot;) dk_muni &lt;- read_sf(muni_link) %&gt;% st_zm() %&gt;% st_transform(crs = &quot;EPSG:25832&quot;) %&gt;% select(KOMKODE, KOMNAVN) %&gt;% rename(muni_id = KOMKODE, muni_name = KOMNAVN) %&gt;% group_by(muni_id, muni_name) %&gt;% summarise(geometry = sf::st_union(geometry)) %&gt;% ungroup() %&gt;% # Calculate the area of each municipalitie (km2) mutate(area_km2 = as.numeric(units::set_units(st_area(.), km^2))) # Country dk_country &lt;- st_union(dk_muni) # Codes of the communes under study capital_region_muni &lt;- c(&quot;København&quot;, &quot;Frederiksberg&quot;, &quot;Albertslund&quot;, &quot;Ballerup&quot;, &quot;Brøndby&quot;, &quot;Dragør&quot;, &quot;Gentofte&quot;, &quot;Gladsaxe&quot;, &quot;Glostrup&quot;, &quot;Herlev&quot;, &quot;Høje-Taastrup&quot;, &quot;Hvidovre&quot;, &quot;Ishøj&quot;, &quot;Lyngby-Taarbæk&quot;, &quot;Rødovre&quot;, &quot;Tårnby&quot;, &quot;Vallensbæk&quot;) # Select municipalities under study capital_muni &lt;- dk_muni %&gt;% filter(muni_name %in% capital_region_muni) dk_country_crop &lt;- st_crop(dk_country, capital_muni) # Parishes polygons of Denmark, and select those in the study area prsh_link &lt;- paste(loc_dir, &quot;DAGIREF_SHAPE_UTM32-EUREF89/ADM&quot;, &quot;SOGN.shp&quot;, sep = &quot;/&quot;) dk_prsh &lt;- read_sf(prsh_link) %&gt;% st_zm() %&gt;% st_transform(crs = &quot;EPSG:25832&quot;) # Select those where the centroid is in the capital region dk_prsh_cent &lt;- st_centroid(dk_prsh) capital_prsh_cent &lt;- st_intersection(dk_prsh_cent, capital_muni) capital_prsh &lt;- dk_prsh %&gt;% # Get parishes in the capital region filter(SOGNEKODE %in% capital_prsh_cent$SOGNEKODE) %&gt;% # Combine several parish features geometries into one polygon group_by(SOGNEKODE, SOGNENAVN) %&gt;% summarise(geometry = st_union(geometry)) %&gt;% ungroup() %&gt;% # add area of the parish (in km2) mutate(prsh_area_km2 = as.numeric(units::set_units(st_area(.), km^2))) %&gt;% # Translate column names rename(prsh_id = SOGNEKODE, prsh_name = SOGNENAVN) # Contour of the capital region (merge the parishes in one polygon): capital_area &lt;- capital_prsh %&gt;% st_union() %&gt;% st_sf() %&gt;% st_transform(crs = &quot;EPSG:25832&quot;) ggplot() + geom_sf(data = capital_prsh, aes(geometry = geometry), fill = &quot;grey&quot;, color = &quot;grey50&quot;, size = 0.05) + geom_sf(data = capital_muni, aes(geometry = geometry), fill = NA, color = &quot;black&quot;, size = 0.5) + theme_void() + annotation_scale(location = &quot;br&quot;, text_cex = 1) + annotation_north_arrow(location = &quot;br&quot;, pad_x = unit(2, &quot;cm&quot;), pad_y = unit(0.65, &quot;cm&quot;), which_north = &quot;true&quot;, height = unit(0.5, &quot;cm&quot;), width = unit(0.5, &quot;cm&quot;), style = north_arrow_orienteering(text_col = &quot;white&quot;, text_size = 1)) 1.1.2 Population Population data from Denmark Statistics: KMSTA001: Population 1. January by parish, ancestry and National Church. ## Auxiliary functions for reading the data with the package *danstat* # Loop by year for getting DST data steps &lt;- function(year){ var_values &lt;- list(id_region, id_ancestry, year) var_input &lt;- purrr::map2(.x = var_codes, .y = var_values, .f = ~list(code = .x, values = .y)) get_data(id_table, variables = var_input) } # Function for removing punctuation, lowercase, stem, stopwords, and collapse strings rm_words &lt;- function(x, stopwords) { x %&gt;% strsplit(&quot; &quot;, fixed = TRUE) %&gt;% lapply(tm::removePunctuation) %&gt;% lapply(tolower) %&gt;% lapply(SnowballC::wordStem) %&gt;% lapply(function(x) x[!x %in% stopwords]) %&gt;% vapply(function(x) paste(x , collapse = &quot;_&quot;), character(1)) } ## Read and clean table KMSTA001 # Table id_table &lt;- &quot;KMSTA001&quot; var_pop &lt;- get_table_metadata(table_id = id_table, variables_only = TRUE) # Codes for var_input var_codes &lt;- c(&quot;SOGN&quot;, &quot;HERKOMST&quot;, &quot;Tid&quot;) # Values for var_input # Region: parishes of the study area (i.e. capital_parish) id_region &lt;- capital_prsh$prsh_id # Ancestry id_ancestry &lt;- NA # Quarters id_year &lt;- var_pop$values[[4]]$id[1:13] # Select 2008-2020 # Read data (n parallel) plan(multisession, workers = 7) capital_prsh_ancestry_read &lt;- id_year %&gt;% future_map_dfr(steps) plan(&quot;default&quot;) # Clean data capital_prsh_ancestry &lt;- capital_prsh_ancestry_read %&gt;% # Translate column names into English rename(parish = SOGN, ancestry = HERKOMST, year = TID, value = INDHOLD) %&gt;% # Get parish codes, names, and municipality names separate(parish, c(&quot;prsh_id&quot;, &quot;prsh_name&quot;, &quot;muni_name&quot;), sep = &quot; &quot;, extra = &quot;drop&quot;) %&gt;% mutate(muni_name = gsub(&quot;\\\\(&quot;, &quot;&quot;, muni_name)) %&gt;% # Make shorter names in ancestry mutate(ancestry = case_when( ancestry == &quot;Persons of Danish origin&quot; ~ &quot;pop_dan&quot;, ancestry == &quot;Immigrants from western countries&quot; ~ &quot;pop_mi_wst&quot;, ancestry == &quot;Immigrants from non-western countries&quot; ~ &quot;pop_mi_nwst&quot;, ancestry == &quot;Descendants from western countries&quot; ~ &quot;pop_de_wst&quot;, ancestry == &quot;Descendants from non-western countries&quot; ~ &quot;pop_de_nwst&quot;), ancestry = factor(ancestry)) %&gt;% # Pivot (one row for peach parish and year) pivot_wider(names_from = ancestry, values_from = value) %&gt;% # Merge immigrants and their descendants (i.e. foreigners) mutate(pop_frgn_wst = pop_mi_wst + pop_de_wst, pop_frgn_nwst = pop_mi_nwst + pop_de_nwst) %&gt;% select(-c(pop_mi_wst, pop_de_wst, pop_mi_nwst, pop_de_nwst)) %&gt;% # Add column with total population mutate(pop_total = select(., starts_with(&quot;pop_&quot;)) %&gt;% rowSums()) %&gt;% # Put NA when pop_* is 0 mutate(across(starts_with(&quot;pop&quot;), ~ifelse(.x == 0, NA, .x))) # Add the spatial information: capital_prsh_ancestry_sf &lt;- capital_prsh %&gt;% select(prsh_id, prsh_area_km2) %&gt;% left_join(capital_prsh_ancestry, by = c(&quot;prsh_id&quot;)) %&gt;% # Population density mutate(across(starts_with(&quot;pop&quot;), ~.x/prsh_area_km2, .names = &quot;{.col}_km2&quot;)) 1.1.3 Housing prices # Load data sum_runits_oft_prices &lt;- readRDS(&quot;prsh_house_prices.rds&quot;) # Plot ggplot() + geom_sf(data = dk_country_crop, aes(geometry = geometry), fill = &quot;grey&quot;) + geom_sf(data = sum_runits_oft_prices, aes(geometry = geometry, fill = cut_number(median_2020_kDKK_m2, n = 10, ordered_result = TRUE, dig.lab = 0)), color = NA, legend = &quot;meh&quot;) + geom_sf(data = capital_muni, aes(geometry = geometry), fill = NA, color = &quot;white&quot;, size = 0.05) + scale_fill_viridis_d( name = TeX(&quot;$\\\\overset{\\\\textbf{Percentiles}}{(kDKK/m^2)}$&quot;), option = &quot;magma&quot;, direction = -1) + theme_void() + guides(fill = guide_legend(reverse=T)) + labs(x = &quot;&quot;, y = &quot;&quot;) + facet_wrap( ~year, ncol = 3) Figure 1.1: Median 2020-adjusted house prices in the ordinary free trade by grid cells of 100m x 100m 1.2 Ternary plots 1.2.1 Diagrams Population structure by year, with all the data together in the same diagram. ggtern::ggtern(data = capital_prsh_ancestry_sf, aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = factor(year))) + scale_color_viridis_d(name = &quot;Year&quot;) + geom_point() + ggtern::theme_rgbw() + ggtern::theme_hidetitles() Figure 1.2: Ternary plot by year Separate plots by year and add the parishes in the legend. ggtern::ggtern(data = capital_prsh_ancestry_sf, aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = prsh_name)) + geom_point() + facet_wrap( ~year, ncol = 3) + ggtern::theme_rgbw() + ggtern::theme_hidetitles() + theme(legend.position = &quot;bottom&quot;) + guides(colour = guide_legend(title.position = &quot;top&quot;)) Figure 1.3: Ternary plots by parish Only 2020 data. ggtern::ggtern(data = filter(capital_prsh_ancestry_sf, year == 2020), aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = prsh_name)) + geom_point() + ggtern::theme_rgbw() + ggtern::theme_hidetitles() + theme(legend.position = &quot;bottom&quot;) + guides(colour = guide_legend(title.position = &quot;top&quot;)) Figure 1.4: Ternary plots by parish in 2020 Links with house prices (zoom the figure to the parishes with median values). ggtern::ggtern(data = sum_runits_oft_prices, aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = cut_number(median_2020_kDKK_m2, n = 10, dig.lab = 0))) + viridis::scale_color_viridis(name = &quot;Percentiles\\n[kDkk/m2]&quot;, option = &quot;turbo&quot;, discrete = TRUE) + geom_point(size = 0.85) + ggtern::theme_rgbw() + ggtern::theme_hidetitles() + ggtern::theme_zoom_L(0.6) + guides(colour = guide_legend(reverse = TRUE, override.aes = list(size = 3))) Figure 1.5: Median housing prices and popupation distribution by parish (all data) ggtern::ggtern(data = sum_runits_oft_prices, aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = cut_number(median_2020_kDKK_m2, n = 10, dig.lab = 0))) + facet_wrap( ~ year, ncol = 3)+ viridis::scale_color_viridis(name = &quot;Percentiles\\n[kDkk/m2]&quot;, option = &quot;turbo&quot;, discrete = TRUE) + geom_point(size = 0.9) + ggtern::theme_rgbw() + ggtern::theme_hidetitles() + ggtern::theme_zoom_L(0.6) + guides(colour = guide_legend(reverse = TRUE, override.aes = list(size = 3))) Figure 1.6: Median housing prices and popupation distribution by parish and year Only 2020 ggtern::ggtern(data = filter(sum_runits_oft_prices, year == 2020), aes(x = pop_dan, y = pop_frgn_wst, z = pop_frgn_nwst, colour = cut_number(median_2020_kDKK_m2, n = 10, dig.lab = 0))) + viridis::scale_color_viridis(name = &quot;Percentiles\\n[kDkk/m2]&quot;, option = &quot;turbo&quot;, discrete = TRUE) + geom_point(size = 0.85) + ggtern::theme_rgbw() + ggtern::theme_hidetitles() + ggtern::theme_zoom_L(0.6) + guides(colour = guide_legend(reverse = TRUE, override.aes = list(size = 3))) Figure 1.7: Median housing prices and popupation distribution by parish (2020) 1.2.2 Maps Center over the compositional mean of 2019 (i.e. Danes ~ 80.3%; non-wst ~ 12.3; and wst ~ 7.4%). f_tern_map &lt;- function(df) { # Make colours tric &lt;- tricolore::Tricolore(df, p1 = &quot;pop_dan&quot;, p2 = &quot;pop_frgn_wst&quot;, p3 = &quot;pop_frgn_nwst&quot;, breaks = Inf, show_data = FALSE, center = c(0.803, 0.074, 0.123), hue = 2/12, lightness = 1, chroma = 1 ) # legend p_legend &lt;- tric$key + labs(L = &quot;% Danes&quot;, T = &quot;% Wst&quot;, R = &quot;% Non-wst&quot;) + theme(axis.title = element_text(size = 5, face = &quot;bold&quot;), axis.text = element_text(size = 5)) # Add columns with colours df &lt;- df %&gt;% mutate(pop_rgb = tric$rgb) # Map ggplot() + geom_sf(data = dk_country_crop, aes(geometry = geometry), fill = &quot;grey&quot;) + geom_sf(data = df, aes(fill = pop_rgb, geometry = geometry), size = 0.05) + scale_fill_identity() + geom_sf(data = capital_muni, aes(geometry = geometry), fill = NA, color = &quot;white&quot;, size = 0.5)+ labs(title = df$year) + theme_void() + annotation_custom( ggtern::ggplotGrob(p_legend) , xmin = 730000, xmax = 742000, ymin = 6178000, ymax = 6190000 ) } plts &lt;- capital_prsh_ancestry_sf %&gt;% group_split(year) %&gt;% map(. , .f = f_tern_map) wrap_plots(plts, ncol = 3) Figure 1.8: Population distribution Only for 2020. plts[[13]] Figure 1.9: Population distribution in 2020 "]]
